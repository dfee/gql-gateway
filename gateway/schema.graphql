# This file is generated. Please do not edit.

type Author implements Node {
  books: [Book!]!
  firstName: String!
  fullName: String!
  id: ID!
  lastName: String!
}

type AuthorConnection {
  nodes: [Author!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AuthorQueryInput {
  after: String = null
  before: String = null
  first: Int = null
  last: Int = null
  sorts: [AuthorSortInput!] = []
}

enum AuthorSortBy {
  CREATED_AT
  FIRST_NAME
}

input AuthorSortInput {
  by: AuthorSortBy!
  order: SortOrder!
}

type Book implements Node {
  author: Author!
  id: ID!
  title: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  author(id: ID!): Author
  authors(input: AuthorQueryInput!): AuthorConnection!
  book(id: ID!): Book
  node(id: ID!): Node
}

enum SortOrder {
  ASC
  DESC
}